#---------- Get AReVi path then arBuildUtils
#           first try arevi_path=foobar argument 
areviPath = ARGUMENTS.get('arevi_path','')
#           else try via arevi-config script
if areviPath=='':
  from subprocess import Popen,PIPE
  try:
    areviPath = Popen(
      ["arevi-config","--install"],stdout=PIPE).communicate()[0].strip()
  except OSError, e: 
    print "no arevi_path argument neither arevi-config script found !",e
    Exit(-1)
#           arBuildUtils.py lies in AReVi_something/lib
import sys
sys.path.append(areviPath+"/lib")
from arBuildUtils import *

#---------- Executable settings ----------------------------------------------
env = getDefaultEnvClone(getDebugArgument(True))
conf = Configure(env)
configOk = True

#if not conf.CheckLibWithHeader("arMoven","ArMoven/ArMoven.h","c++"):
#  configOk = False
#  print "No arMoven found"

env.Prepend(CPPPATH="#/../../include")
env.Prepend(LIBPATH="#/../../lib")

if not conf.CheckLibWithHeader("libAReViHLib2","hLib/hLib.h","c++"):
  configOk = False
  print "No hLib2 found"

if not conf.CheckLib('OpenNI2'): 
  print "OpenNI lib not found"
  configOk = False
elif not conf.CheckLib('NiTE2'):
  print "XnVNite lib not found"
  configOk = False
if not conf.CheckLib('arMoven'):
  print "arMoven lib not found"
  configOk = False
if not conf.CheckLib('arWiiLib'):
  print "arWiiLib not found"
  configOk = False

env.Prepend(CPPPATH=areviPath+"/include/ArKinect2/OpenNI2.2")

if not conf.CheckLibWithHeader("ArKinect2","ArKinect2/kinectOpenNI2.h","c++"):
  configOk = False
  print "No ArKinect2 found"

env = conf.Finish()

if configOk:
  arProgram( env = env, srcList = ["app.cpp",
                                   "udpKinectSkeleton.cpp",
                                   "weirdSkins.cpp",
                                   "mobileSkin.cpp",
                                   "particleWeirdSkin.cpp"])
else:
  print
  print "!!!!!!!! Config not ok, no compilation"
  print

addFontsDirectories(env,'#')

